{
  "$schema": "https://json.schemastore.org/eslintrc",
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "projectService": true,
    "tsconfigRootDir": "./"
  },
  "plugins": [
    "@typescript-eslint",
    "@stylistic"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/strict-type-checked",
    "plugin:@stylistic/recommended-extends",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react-hooks/recommended",
    "plugin:import/recommended",
    "plugin:jsx-a11y/recommended",
    "next/core-web-vitals"
  ],
  "rules": {
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/prefer-reduce-type-parameter": "off",
    "import/named": "off",
    "react/display-name": "off",
    "@stylistic/padded-blocks": "off",

    "no-console": ["error"],
    "object-shorthand": ["error", "never"],
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      {
        "allow": [
          {
            "name": "unknown",
            "from": "lib"
          }
        ],
        "allowNumber": true,
        "allowBoolean": true,
        "allowNever": true,
        "allowAny": false,
        "allowArray": false,
        "allowNullish": false,
        "allowRegExp": false
      }
    ],
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true
      }
    ],
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "attributes": false
        }
      }
    ],
    "@typescript-eslint/strict-boolean-expressions": [
      "error",
      {
        "allowString": false,
        "allowNumber": false,
        "allowNullableObject": false
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "filter": {
          "regex": "\\d+",
          "match": false
        },
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "import",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": ["enum", "interface", "typeAlias", "typeParameter"],
        "format": ["PascalCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "class",
        "format": ["PascalCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "classProperty",
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": [
      "error",
      {
        "allowConstantLoopConditions": "only-allowed-literals"
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "@stylistic/semi": ["error", "always"],
    "@stylistic/arrow-parens": ["error", "always"],
    "@stylistic/member-delimiter-style": [
      "error",
      {
        "singleline": {
          "requireLast": true
        }
      }
    ],
    "@stylistic/operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before"
        }
      }
    ],
    "@stylistic/object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "multiline": true,
          "minProperties": 1,
          "consistent": true
        },
        "ExportDeclaration": "always"
      }
    ]
  }
}
